AWSTemplateFormatVersion: "2010-09-09"
Description: Stack for MQ Lambda Trigger Monitor demo

Parameters:
  KeyPair:
    Type: "AWS::EC2::KeyPair::KeyName"
    Description : "Name of an existing EC2 KeyPair to enable SSH access to the instance"
    ConstraintDescription : "must be the name of an existing EC2 KeyPair."
  S3Bucket:
    Type: String
    Description: "An existing bucket to be used to upload Lambda code"
  S3Key:
    Type: String
    Description: "The name of the archive with Lambda code"


Mappings:
  AWSRegion2AMI:
    us-east-1:
      "64" : "ami-b73b63a0"
    us-east-2:
      "64" : "ami-58277d3d"
    us-west-2:
      "64" : "ami-5ec1673e"
    us-west-1:
      "64" : "ami-23e8a343"
    eu-west-1:
      "64" : "ami-9398d3e0"
    eu-central-1:
      "64" : "ami-f9619996"
    ap-southeast-1:
      "64" : "ami-b953f2da"
    ap-northeast-2:
      "64" : "ami-983ce8f6"
    ap-northeast-1:
      "64" : "ami-0c11b26d"
    ap-southeast-2:
      "64" : "ami-db704cb8"

Resources:

  MqVPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: MqVPC

  MqInstanceSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      VpcId: !Ref MqVPC
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: ''

  RdsSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: 10.0.1.0/24
      VpcId: !Ref MqVPC
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs: ''

  MqIGW:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
      - Key: Name
        Value: MqIGW

  MqIGWAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref MqIGW
      VpcId: !Ref MqVPC

  MqRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref MqVPC
      Tags:
      - Key: Name
        Value: MqRouteTable

  MqRoute:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MqIGW
      RouteTableId: !Ref MqRouteTable

  MqSubnetRouteTableAssoc:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref MqRouteTable
      SubnetId: !Ref MqInstanceSubnet

  RdsSubnetRouteTableAssoc:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref MqRouteTable
      SubnetId: !Ref RdsSubnet

  MqInstanceSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Allow SSH and MQ
      VpcId: !Ref MqVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '1414'
        ToPort: '1414'
        CidrIp: 10.0.0.0/16
      SecurityGroupEgress:
      - IpProtocol: '-1'
        FromPort: '0'
        ToPort: '65535'
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: MqInstanceSecurityGroup

  MqInstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "invoke-any-lambda"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                - "lambda:InvokeFunction"
                - "cloudformation:DescribeStacks"
                Resource: "*"

  MqInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: '/'
      Roles:
      - !Ref MqInstanceRole

  MySqlSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: 'MQ Lambda Demo DB Subnet Group'
      SubnetIds:
      - !Ref MqInstanceSubnet
      - !Ref RdsSubnet

  MySqlEC2SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Allow MySQL connections in
      VpcId: !Ref MqVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '3306'
        ToPort: '3306'
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: '-1'
        FromPort: '0'
        ToPort: '65535'
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: MySqlEC2SecurityGroup

  MySqlInstance:
    Type: "AWS::RDS::DBInstance"
    Properties:
      Tags:
      - Key: Name
        Value: 'MQ Lambda Demo DB'
      AllocatedStorage: '5'
      DBInstanceClass: 'db.t2.micro'
      VPCSecurityGroups:
      - !Ref MySqlEC2SecurityGroup
      DBSubnetGroupName: !Ref MySqlSubnetGroup
      Engine: 'MariaDB'
      MasterUsername: 'demouser'
      MasterUserPassword: 'demopass'
      PubliclyAccessible: true
    DependsOn: MqIGW

  MqInstance:
    Type: "AWS::EC2::Instance"
    Properties:
      Tags:
      - Key: Name
        Value: 'MQ Lambda Demo instance'
      IamInstanceProfile: !Ref MqInstanceProfile
      ImageId: !FindInMap [AWSRegion2AMI, !Ref "AWS::Region", 64]
      InstanceType: "t2.micro"
      KeyName: !Ref KeyPair
      SecurityGroupIds:
      - !Ref MqInstanceSecurityGroup
      SubnetId: !Ref MqInstanceSubnet
      UserData:
        Fn::Base64: !Sub |
          #! /bin/bash
          echo '==========> cloud-init user data script started'
          export AWS_DEFAULT_REGION=${AWS::Region}
          export AWS_REGION=$AWS_DEFAULT_REGION
          export STACK_ID=${AWS::StackId}
          yum install -y git jq
          mkdir -p /var/lambda-test
          cd /var/lambda-test
          git clone https://github.com/yurist/mqlambdatm-demo.git
          cd mqlambdatm-demo/demo/cloud-init
          ./run-demo.sh
    DependsOn:
    - MqIGW


  RoleLambdaVpcExecution:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "lambda-vpc-execution-role"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                - 'logs:createLogGroup'
                - 'logs:createLogStream'
                - 'logs:putLogEvents'
                - 'ec2:createNetworkInterface'
                - 'ec2:describeNetworkInterface'
                - 'ec2:describeNetworkInterfaces'
                - 'ec2:deleteNetworkInterface'
                Resource: "*"

  SampleLambdaMqConsumer:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Ref S3Key
      Description: Sample Lambda MQ Consumer
      FunctionName: MQLambdaSampleMessageConsumer
      Handler: com.steinschreiber.aws.samples.SampleMySqlMessageProcessor::handler
      Environment:
        Variables:
          'MQMYSQLSAMPLE_DBUSER': 'demouser'
          'MQMYSQLSAMPLE_DBPASSWORD': 'demopass'
          'MQMYSQLSAMPLE_DBNAME': 'mqlambdademo'
          'MQMYSQLSAMPLE_DBHOST':
            Fn::GetAtt:
            - MySqlInstance
            - Endpoint.Address
          'MQLAMBDA_HOST':
            Fn::GetAtt:
            - MqInstance
            - PrivateDnsName
          'MQLAMBDA_CHANNEL': 'PASSWORD.SVRCONN'
          'MQLAMBDA_USERID': 'demo'
          'MQLAMBDA_PASSWORD': 'demo'
      MemorySize: 256
      Role:
        Fn::GetAtt:
        - RoleLambdaVpcExecution
        - Arn
      Runtime: java8
      Timeout: 10
      VpcConfig:
        SecurityGroupIds:
          - !Ref MqInstanceSecurityGroup
        SubnetIds:
          - !Ref MqInstanceSubnet


Outputs:
  MqInstancePublicDns:
    Description: Public DNS name of MQ Server EC2 instance
    Value:
        Fn::GetAtt:
        - MqInstance
        - PublicDnsName

  MySqlInstancePublicDns:
    Description: Public DNS name of sample database instance
    Value:
        Fn::GetAtt:
        - MySqlInstance
        - Endpoint.Address
